// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract w4sted is Ownable, ERC20 {
    // keep song serial number
    uint256 internal serial;

    // user details
    struct User {
        uint256 tokensPurchased;
        string[] songsListened;
    }

    // track details
    struct Song {
        uint256 serialNo;
        string name;
        string text;
        uint256 length;
        uint256 rates;
        uint256 rateCount;
        uint256 timesListened;
        uint256 baseValue;
        bool active;
    }

    // mapping to keep song of all songs
    mapping(uint256 => Song) internal songs;
    // mapping to keep song of all users
    mapping(address => User) internal users;
    // mapping to keep songs user has already rated to prevent rating multiple times
    mapping(uint256 => mapping(address => bool)) internal rated;

    
    constructor(uint256 _quantity) ERC20("W4sted Productions", "SMS") {
        address _to = address(this);
        _mint(_to, _quantity);
    }

    // function to get the value of a token in ethers
    function getValue(uint256 _quantity) internal pure returns (uint256) {
        return _quantity * 10**18;
    }

    // function to get the calculated value of song
    // Increment song value by 5% for every listen
    function calculateValue(uint256 _songSerial)
        public
        view
        returns (uint256)
    {
        Song memory song = songs[_songSerial];
        uint256 increment = (song.baseValue * song.timesListened) / 5;
        uint256 calculatedValue = song.baseValue + increment;
        return calculatedValue;
    }

    // function to get ERC20 balance of "_address"
    function erc20Balance(address _address) public view returns (uint256) {
        return balanceOf(_address);
    }

    // Add new song into the library
    // @_length in seconds
    function AddSong(
        string memory _name,
        string memory _text,
        uint256 _length,
        uint256 _value
    ) public onlyOwner {
        require(_length > 1 minutes, "Song length too short");
        songs[serial] = Song(
            serial,
            _name,
            _text,
            _length,
            5,
            1,
            0,
            _value,
            true
        );
        serial += 1;
    }

    // function to remove a song from the library
    function removeSong(uint256 _songSerial) public onlyOwner {
        delete songs[_songSerial];
    }

    // function to swap customer token for eth from contract
    function swapTokens(uint256 _quantity) public payable {
        require(_quantity > 0, "Invalid quantity of tokens entered");
        require(
            _quantity <= erc20Balance(msg.sender),
            "Quantity requested higher that your balance"
        );
        // first send token to contract
        _transfer(msg.sender, address(this), _quantity);
        // then get value of token in user wallet in return
        (bool success, ) = payable(msg.sender).call{
            value: (getValue(_quantity))
        }("");
        require(success, "Unsuccessfully");
    }

    // function to buy token from contract
    function buyToken(uint256 _quantity) public payable {
        uint256 cost = getValue(_quantity);
        require(
            msg.value >= cost,
            "Quantity is not enough to buy"
        );
        uint256 contractTokenBalance = erc20Balance(address(this));
        // user cannot buy more than the token balance in the contract
        require(
            _quantity <= contractTokenBalance,
            "Insufficient tokens in contract"
        );
        // overflow is the balance remaining from excess amount user sends to contract
        uint256 overflow = msg.value - cost;
        // sends overflow amount back to user
        if (overflow > 0) payable(msg.sender).transfer(overflow);
        // transfer token to user
        _transfer(address(this), msg.sender, _quantity);
        // keep song of purchase
        users[msg.sender].tokensPurchased += _quantity;
    }

    // function to listen song and pay tokens for it
    function listenSong(uint256 _serial) public {
        // first confirm if song is available now
        require(songs[_serial].active, "Song deleted/does not exist");
        // get calculated value of song
        uint256 calculatedValue = calculateValue(_serial);
        // confirm if user has enough tokens to listen song
        require(
            calculatedValue <= erc20Balance(msg.sender),
            "You don't have enough tokens to listen song"
        );
        _transfer(msg.sender, address(this), calculatedValue);
        songs[_serial].timesListened++;
        // Storage in the client's history of listened songs
        users[msg.sender].songsListened.push(songs[_serial].name);
    }

    // function to rate a song, 1 and 10 inclusive
    function rateSong(uint256 _serial, uint256 _rate) public {
        require((_rate > 0) && (_rate <= 10), "Invalid rate entered");
        require(!rated[_serial][msg.sender], "You can't rate song more than once");
        songs[_serial].rates += _rate;
        songs[_serial].rateCount++;
        rated[_serial][msg.sender] = true;
    }


    // get details of songs user has listened
    function getSongsListened() public view returns (string[] memory) {
        return users[msg.sender].songsListened;
    }

    // function to get song details
    function getSongDetails(uint256 _serial)
        public
        view
        returns (
            string memory name,
            string memory text,
            uint256 length,
            uint256 timesListened,
            uint256 rating,
            uint256 value
        )
    {
        require(songs[_serial].active, "Song not active / song deleted");
        Song memory song =songs[_serial];
        name = song.name;
        text = song.text;
        length = song.length;
        timesListened = song.timesListened;
        rating = song.rates / song.rateCount;
        value = calculateValue(song.serialNo);
    }

    // function to withdraw funds from contract without "rug pulling" users funds
    function withdraw() public onlyOwner {
        // get total number of token users are hodling
        uint256 tokensOut = totalSupply() - erc20Balance(address(this));
        // amount in eth to pay token hodlers
        uint256 secureHodlers = address(this).balance - getValue(tokensOut);
        // balance owner will be able to withdraw such that there will be enough 
        // ethers in the contract for token holders
        uint256 organicBal = address(this).balance - secureHodlers;
        payable(owner()).transfer(organicBal);
    }
}
